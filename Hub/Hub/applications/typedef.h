/*
 * @Copyright (c) 2006-2018 RT-Thread Development Team:
 * @SPDX-License-Identifier: Apache-2.0:
 * @Change Logs:
 * @Date: 2020-03-08
 * @LastEditors: Qiu Yijie
 * @LastEditTime: 2020-03-08
 * @Description:
 */
/*----------------------ANSI C语言运算优先级-----------------

--------------------------------------------------------------------------------------------------------------
    优先级        |    运算符         |       名称或含义        |          使用形式            |    结合方向
                  |      []           |        数组下标         |     数组名[常量表达式]       |    左到右
                  |      ()           |         圆括号          |     (表达式),函数名(形参表)  |
                  |      .            |      成员选择(对象)     |      对象.成员名             |
                  |      ->           |      成员选择(指针)     |      对像指针->成员名        |
---------------------------------------------------------------------------------------------------------------
                  |      -            |      负号运算符         |         -表达式              |
                  |    (类型)         |      强制类型转换       |       (数据类型)表达式       |
                  |      ++           |       递增1             |        ++变量名,变量名++     |
                  |      --           |       递减1             |        --变量名,变量名--     |
                  |      *            |   根据指针(地址)取值    |      *指针变量               |
                  |      &            |       取地址            |       &变量名                |
                  |      !            |       逻辑非            |        !(表达式)             |
                  |      ~            |       按位取反          |        ~表达式               |
                  |    sizeof         |       取数据类型长度    |        sizeof(数据类型)      |
----------------------------------------------------------------------------------------------------------------
                  |      /            |      除(或整除)         |       表达式/表达式          |
                  |      *            |      乘                 |       表达式*表达式          |
                  |      %            |      取余数             |   整型表达式%整型表达式      |
----------------------------------------------------------------------------------------------------------------
                  |       +           |      加                 |       表达式+表达式          |
                  |       -           |      减                 |       表达式-表达式          |
-----------------------------------------------------------------------------------------------------------------
                  |      <<           |      左移               |        变量<<表达式          |
                  |      >>           |      右移               |        变量>>表达式          |
----------------------------------------------------------------------------------------------------------------
                  |       >           |       大于              |        表达式>表达式         |
                  |       >=          |       大于等于          |        表达式>=表达式        |
                  |       <           |       小于              |        表达式<表达式         |
                  |       <=          |       小于等于          |        表达式<=表达式        |
----------------------------------------------------------------------------------------------------------------
                  |       ==          |        等于             |        表达式==表达式        |
                  |       !=          |        不等于           |        表达式!=表达式        |
----------------------------------------------------------------------------------------------------------------
                  |       &           |        按位与           |        表达式&表达式         |
                  |       ^           |        按位异或         |        表达式^表达式         |
                  |       |           |        按位或           |        表达式|表达式         |
                  |       &&          |        逻辑与           |        表达式&&表达式        |
                  |       ||          |        逻辑或           |        表达式||表达式        |
                  |       ?:          |        三个条件运算符   |  表达式1? 表达式2:表达式3    |
                  |       =           |        赋值             |        变量=表达式           |
                  |       /=          |        除后赋值         |        变量/=表达式          |
                  |       *=          |        乘后赋值         |        变量*=表达式          |
                  |       %=          |        取模后赋值       |        变量%=表达式          |
                  |       +=          |        加后赋值         |        变量+=表达式          |
                  |       -=          |        减后赋值         |        变量-=表达式          |
                  |       <<=         |        左移后赋值       |        变量<<=表达式         |
                  |       >>=         |        右移后赋值       |        变量>>=表达式         |
                  |       &=          |        按位与后赋值     |        变量&=表达式          |
                  |       ^=          |        按位异或后赋值   |        变量^=表达式          |
                  |       |=          |        按位或后赋值     |        变量|=表达式          |
                  |       ,           |        逗号运算符       |  表达式,表达式,.....         |



---------------------------*/

//9600b/s 波特率每字符时间为:1/9600*(1+8+1) ~ 1041.66us ~1ms
//帧间:       3.5个字符时间为   1041.66*(3.5+1) ~ 4687.5us ~4.6ms ~5ms
//字节间:  1.5个字符时间为 1041.66*(1.5+1) ~ 2604.2us ~2.6ms~3ms
//这个工程的定时器已设置8M/80(分频),即10us触发一次中断.
#ifndef APPLICATIONS_TYPEDEF_H_
#define APPLICATIONS_TYPEDEF_H_

#include "stm32f4xx_hal.h"

#define  ID_ADDR1  0x1FFF7A10        /*STM32F4唯一ID起始地址*/
#pragma pack(1)   //按1字节对齐              //cJSON不能1字节对齐

enum {
  NO = 0x00,
  YES = 0x01,
}Result;

typedef int32_t s32;
typedef int16_t s16;
typedef int8_t s8;

typedef const int32_t sc32;
typedef const int16_t sc16;
typedef const int8_t sc8;

typedef __IO int32_t vs32;
typedef __IO int16_t vs16;
typedef __IO int8_t vs8;

typedef __I int32_t vsc32;
typedef __I int16_t vsc16;
typedef __I int8_t vsc8;

typedef uint64_t u64;
typedef uint32_t u32;
typedef uint16_t u16;
typedef uint8_t u8;

typedef const uint32_t uc32;
typedef const uint16_t uc16;
typedef const uint8_t uc8;

typedef __IO uint32_t vu32;
typedef __IO uint16_t vu16;
typedef __IO uint8_t vu8;

typedef __I uint32_t vuc32;
typedef __I uint16_t vuc16;
typedef __I uint8_t vuc8;

typedef void (*gokitEvent)(void);
typedef u16 (*getkitEvent)(u16 id);
typedef void (*setkitEvent)(u16 id);

typedef u16 (*getEvent)(void);
u16 usModbusRTU_CRC(const u8* pucData, u32 ulLen);
u16 CRC16(u16 *pdata, u16 len,  u16 random_num);
void ReadUniqueId(u32 *id);
#endif /* APPLICATIONS_TYPEDEF_H_ */
